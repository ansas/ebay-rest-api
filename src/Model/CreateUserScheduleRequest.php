<?php
/**
 * CreateUserScheduleRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Ansas\Ebay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Feed API
 *
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ansas\Ebay\Model;

use \ArrayAccess;
use \Ansas\Ebay\ObjectSerializer;

/**
 * CreateUserScheduleRequest Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the createSchedule method.
 * @package  Ansas\Ebay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateUserScheduleRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateUserScheduleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'feedType' => 'string',
        'preferredTriggerDayOfMonth' => 'int',
        'preferredTriggerDayOfWeek' => 'string',
        'preferredTriggerHour' => 'string',
        'scheduleEndDate' => 'string',
        'scheduleName' => 'string',
        'scheduleStartDate' => 'string',
        'scheduleTemplateId' => 'string',
        'schemaVersion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'feedType' => null,
        'preferredTriggerDayOfMonth' => 'int32',
        'preferredTriggerDayOfWeek' => null,
        'preferredTriggerHour' => null,
        'scheduleEndDate' => null,
        'scheduleName' => null,
        'scheduleStartDate' => null,
        'scheduleTemplateId' => null,
        'schemaVersion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feedType' => 'feedType',
        'preferredTriggerDayOfMonth' => 'preferredTriggerDayOfMonth',
        'preferredTriggerDayOfWeek' => 'preferredTriggerDayOfWeek',
        'preferredTriggerHour' => 'preferredTriggerHour',
        'scheduleEndDate' => 'scheduleEndDate',
        'scheduleName' => 'scheduleName',
        'scheduleStartDate' => 'scheduleStartDate',
        'scheduleTemplateId' => 'scheduleTemplateId',
        'schemaVersion' => 'schemaVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feedType' => 'setFeedType',
        'preferredTriggerDayOfMonth' => 'setPreferredTriggerDayOfMonth',
        'preferredTriggerDayOfWeek' => 'setPreferredTriggerDayOfWeek',
        'preferredTriggerHour' => 'setPreferredTriggerHour',
        'scheduleEndDate' => 'setScheduleEndDate',
        'scheduleName' => 'setScheduleName',
        'scheduleStartDate' => 'setScheduleStartDate',
        'scheduleTemplateId' => 'setScheduleTemplateId',
        'schemaVersion' => 'setSchemaVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feedType' => 'getFeedType',
        'preferredTriggerDayOfMonth' => 'getPreferredTriggerDayOfMonth',
        'preferredTriggerDayOfWeek' => 'getPreferredTriggerDayOfWeek',
        'preferredTriggerHour' => 'getPreferredTriggerHour',
        'scheduleEndDate' => 'getScheduleEndDate',
        'scheduleName' => 'getScheduleName',
        'scheduleStartDate' => 'getScheduleStartDate',
        'scheduleTemplateId' => 'getScheduleTemplateId',
        'schemaVersion' => 'getSchemaVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feedType'] = $data['feedType'] ?? null;
        $this->container['preferredTriggerDayOfMonth'] = $data['preferredTriggerDayOfMonth'] ?? null;
        $this->container['preferredTriggerDayOfWeek'] = $data['preferredTriggerDayOfWeek'] ?? null;
        $this->container['preferredTriggerHour'] = $data['preferredTriggerHour'] ?? null;
        $this->container['scheduleEndDate'] = $data['scheduleEndDate'] ?? null;
        $this->container['scheduleName'] = $data['scheduleName'] ?? null;
        $this->container['scheduleStartDate'] = $data['scheduleStartDate'] ?? null;
        $this->container['scheduleTemplateId'] = $data['scheduleTemplateId'] ?? null;
        $this->container['schemaVersion'] = $data['schemaVersion'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feedType
     *
     * @return string|null
     */
    public function getFeedType()
    {
        return $this->container['feedType'];
    }

    /**
     * Sets feedType
     *
     * @param string|null $feedType The name of the feed type for the created schedule. Match the feed_type from the schedule template associated with this schedule.
     *
     * @return self
     */
    public function setFeedType($feedType)
    {
        $this->container['feedType'] = $feedType;

        return $this;
    }

    /**
     * Gets preferredTriggerDayOfMonth
     *
     * @return int|null
     */
    public function getPreferredTriggerDayOfMonth()
    {
        return $this->container['preferredTriggerDayOfMonth'];
    }

    /**
     * Sets preferredTriggerDayOfMonth
     *
     * @param int|null $preferredTriggerDayOfMonth The preferred day of the month to trigger the schedule. This field can be used with preferredTriggerHour for monthly schedules. The last day of the month is used for numbers larger than the actual number of days in the month. This field is available as specified by the template (scheduleTemplateId). The template can specify this field as optional or required, and optionally provides a default value. Minimum: 1 Maximum: 31
     *
     * @return self
     */
    public function setPreferredTriggerDayOfMonth($preferredTriggerDayOfMonth)
    {
        $this->container['preferredTriggerDayOfMonth'] = $preferredTriggerDayOfMonth;

        return $this;
    }

    /**
     * Gets preferredTriggerDayOfWeek
     *
     * @return string|null
     */
    public function getPreferredTriggerDayOfWeek()
    {
        return $this->container['preferredTriggerDayOfWeek'];
    }

    /**
     * Sets preferredTriggerDayOfWeek
     *
     * @param string|null $preferredTriggerDayOfWeek The preferred day of the week to trigger the schedule. This field can be used with preferredTriggerHour for weekly schedules. This field is available as specified by the template (scheduleTemplateId). The template can specify this field as optional or required, and optionally provides a default value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setPreferredTriggerDayOfWeek($preferredTriggerDayOfWeek)
    {
        $this->container['preferredTriggerDayOfWeek'] = $preferredTriggerDayOfWeek;

        return $this;
    }

    /**
     * Gets preferredTriggerHour
     *
     * @return string|null
     */
    public function getPreferredTriggerHour()
    {
        return $this->container['preferredTriggerHour'];
    }

    /**
     * Sets preferredTriggerHour
     *
     * @param string|null $preferredTriggerHour The preferred two-digit hour of the day to trigger the schedule. This field is available as specified by the template (scheduleTemplateId). The template can specify this field as optional or required, and optionally provides a default value. Format: UTC hhZ For example, the following represents 11:00 am UTC: 11Z
     *
     * @return self
     */
    public function setPreferredTriggerHour($preferredTriggerHour)
    {
        $this->container['preferredTriggerHour'] = $preferredTriggerHour;

        return $this;
    }

    /**
     * Gets scheduleEndDate
     *
     * @return string|null
     */
    public function getScheduleEndDate()
    {
        return $this->container['scheduleEndDate'];
    }

    /**
     * Sets scheduleEndDate
     *
     * @param string|null $scheduleEndDate The timestamp on which the report generation (subscription) ends. After this date, the schedule status becomes INACTIVE. Use this field, if available, to end the schedule in the future. This value must be later than scheduleStartDate (if supplied). This field is available as specified by the template (scheduleTemplateId). The template can specify this field as optional or required, and optionally provides a default value. Format: UTC yyyy-MM-ddTHHZ For example, the following represents UTC October 10, 2021 at 10:00 AM: 2021-10-10T10Z
     *
     * @return self
     */
    public function setScheduleEndDate($scheduleEndDate)
    {
        $this->container['scheduleEndDate'] = $scheduleEndDate;

        return $this;
    }

    /**
     * Gets scheduleName
     *
     * @return string|null
     */
    public function getScheduleName()
    {
        return $this->container['scheduleName'];
    }

    /**
     * Sets scheduleName
     *
     * @param string|null $scheduleName The schedule name assigned by the user for the created schedule.
     *
     * @return self
     */
    public function setScheduleName($scheduleName)
    {
        $this->container['scheduleName'] = $scheduleName;

        return $this;
    }

    /**
     * Gets scheduleStartDate
     *
     * @return string|null
     */
    public function getScheduleStartDate()
    {
        return $this->container['scheduleStartDate'];
    }

    /**
     * Sets scheduleStartDate
     *
     * @param string|null $scheduleStartDate The timestamp to start generating the report. After this timestamp, the schedule status becomes active until either the scheduleEndDate occurs or the scheduleTemplateId becomes inactive. Use this field, if available, to start the schedule in the future but before the scheduleEndDate (if supplied). This field is available as specified by the template (scheduleTemplateId). The template can specify this field as optional or required, and optionally provides a default value. Format: UTC yyyy-MM-ddTHHZ For example, the following represents a schedule start date of UTC October 01, 2020 at 12:00 PM: 2020-01-01T12Z
     *
     * @return self
     */
    public function setScheduleStartDate($scheduleStartDate)
    {
        $this->container['scheduleStartDate'] = $scheduleStartDate;

        return $this;
    }

    /**
     * Gets scheduleTemplateId
     *
     * @return string|null
     */
    public function getScheduleTemplateId()
    {
        return $this->container['scheduleTemplateId'];
    }

    /**
     * Sets scheduleTemplateId
     *
     * @param string|null $scheduleTemplateId The ID of the template associated with the schedule ID. You can get this ID from the documentation or by calling the getScheduleTemplates method. This method requires a schedule template ID that is ACTIVE.
     *
     * @return self
     */
    public function setScheduleTemplateId($scheduleTemplateId)
    {
        $this->container['scheduleTemplateId'] = $scheduleTemplateId;

        return $this;
    }

    /**
     * Gets schemaVersion
     *
     * @return string|null
     */
    public function getSchemaVersion()
    {
        return $this->container['schemaVersion'];
    }

    /**
     * Sets schemaVersion
     *
     * @param string|null $schemaVersion The schema version of the schedule feedType. This field is required if the feedType has a schema version. This field is available as specified by the template (scheduleTemplateId). The template can specify this field as optional or required, and optionally provides a default value.
     *
     * @return self
     */
    public function setSchemaVersion($schemaVersion)
    {
        $this->container['schemaVersion'] = $schemaVersion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


